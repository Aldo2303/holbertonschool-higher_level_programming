>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

SUCCESS CASES:

Test ints and floats in same size lists in list matrix:
     >>> matrix = [[3.3, 2, 7], [8, 5.5, 9]]
     >>> print(matrix_divided(matrix, 3))
     [[3.3, 2, 7], [8, 5.5, 8.6]]

     >>> matrix = [[9, 8.1, 7], [6, 5, 4.3]]
     >>> print(matrix_divided(matrix, float("inf")))
     [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

     >>> matrix = [[-6, 8.2], [-2.5, 3]]
     >>> print(matrix_divided(matrix, 7.1))
     [[-0.85, 1.15], [-0.35, 0.42]]

     >>> matrix = [[True], [False]]
     >>> matrix_divided(matrix, True)
     [[1.0], [0.0]]

FAILURE CASES:

Test empty matrix:
     >>> matrix_divided(None, 7)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = []
     >>> matrix_divided(matrix, 2.1)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

Test different sized lists in matrix:
     >>> matrix = [[9, 8.1, 7], [6, 5, 4.3, 8]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: Each row of the matrix must have the same size

     >>> matrix = [[9, 8.1, 7], [6, 5, 4.3], [8]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: Each row of the matrix must have the same size

Test matrix with other data types:
     >>> matrix = [["Hello"], ["World"]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[1, 2, 3], [{"key" : 4}]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: Each row of the matrix must have the same size

     >>> matrix = [[1, 2, 3], [{"key1" : 98}, {"key2" : 94}, {"key3" : 348}]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[8, 7.2], 6.7654, {5, 4}]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = {23, 1.7, 7, 54}
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = ([8, 7], [6, 5])
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[1, 2], [3, (4, 5)]]
     >>> matrix_divided(matrix, 9)
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

Test extra arguments:
     >>> matrix = [[1, 2, 3], [4, 5, 6]]
     >>> matrix_divided(matrix, 2, 10)
     Traceback (most recent call last):
     ...
     TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Test too few arguments
     >>> matrix = [[1, 2], [3, 4]]
     >>> matrix_divided(matrix)
     Traceback (most recent call last):
     ...
     TypeError: matrix_divided() missing 1 required positional argument: 'div'

     >>> matrix = [[1, 2], [3, 4]]
     >>> matrix_divided(9)
     Traceback (most recent call last):
     ...
     TypeError: matrix_divided() missing 1 required positional argument: 'div'

Test div as 0 or non-int or non-float:
     >>> matrix = [[1, 2], [3, 4]]
     >>> matrix_divided(matrix, 0)
     Traceback (most recent call last):
     ...
     ZeroDivisionError: division by zero

     >>> matrix = [[True], [False]]
     >>> matrix_divided(matrix, False)
     Traceback (most recent call last):
     ...
     ZeroDivisionError: division by zero

     >>> matrix = [[1, 2], [3, 4]]
     >>> matrix_divided(matrix, "3")
     Traceback (most recent call last):
     ...
     TypeError: div must be a number
